package com.suranjan.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

@EnableGlobalMethodSecurity(prePostEnabled = true)
@Configuration
@EnableWebSecurity
public class MySecurityConfiguration extends WebSecurityConfigurerAdapter {

	
	 @Autowired
	    private CustomUserDetailService customUserDetailService;

	    @Override
	    protected void configure(HttpSecurity http) throws Exception {

	        http.cors();
	        http
	                .csrf().disable()
	                .authorizeRequests()
//	                .antMatchers("/api/students").hasRole("ADMIN")
	                .antMatchers(HttpMethod.GET).permitAll()
	                .anyRequest()
	                .authenticated()
	                .and()
	                .httpBasic();
	    }


	    @Override
	    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
//	        auth.inMemoryAuthentication().withUser("suranjan")
//	                .password(this.passwordEncoder().encode("suranjan")).roles("NORMAL");
	//
//	        auth.inMemoryAuthentication().withUser("lipu")
//	                .password(this.passwordEncoder().encode("lipu")).roles("ADMIN");

	        auth.userDetailsService(customUserDetailService).passwordEncoder(passwordEncoder());
	    }


	    @Bean
	    public BCryptPasswordEncoder passwordEncoder(){
	        return new BCryptPasswordEncoder(10);
	    }
	}
